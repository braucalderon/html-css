import LRU from 'tiny-lru';
import fnv1a from '@sindresorhus/fnv1a';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function generateKey(keyObj) {
  return fnv1a(JSON.stringify(keyObj)).toString(36);
}

function memCache(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 100 : _ref$size,
      _ref$ttl = _ref.ttl,
      ttl = _ref$ttl === void 0 ? 0 : _ref$ttl,
      initialState = _ref.initialState;

  var lru = LRU(size, ttl);

  if (initialState) {
    Object.keys(initialState).map(function (k) {
      lru.set(k, initialState[k]);
    });
  }

  return {
    get: function get(keyObj) {
      return lru.get(generateKey(keyObj));
    },
    set: function set(keyObj, data) {
      return lru.set(generateKey(keyObj), data);
    },
    delete: function _delete(keyObj) {
      return lru.delete(generateKey(keyObj));
    },
    clear: function clear() {
      return lru.clear();
    },
    keys: function keys() {
      return lru.keys();
    },
    getInitialState: function getInitialState() {
      return lru.keys().reduce(function (initialState, key) {
        var _objectSpread2$1;

        return _objectSpread2({}, initialState, (_objectSpread2$1 = {}, _objectSpread2$1[key] = lru.get(key), _objectSpread2$1));
      }, {});
    }
  };
}

export default memCache;
